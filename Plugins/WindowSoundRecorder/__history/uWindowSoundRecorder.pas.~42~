unit uWindowSoundRecorder;

interface

uses
  SysUtils,
  Forms,
  uPluginHeaders,
  JvAppIniStorage,
  Classes,
  Windows,
  Controls,
  ActnList,
  DB,
  Variants,
  KDaoDatabase,
  uWindowSoundRecorderForm,
  uUtils,
  uWindowSoundRecorderSettingsFrame;

function Initialize(App: TApplication; Scr: TScreen; ActionList: TActionList; AppStorage: TJvAppIniFileStorage; ImageList: TImageList; DllCommand: pointer; Database: TKADaoDatabase; dsLogEdit: TDataSource; dsLog: TDataSource; IMSName:string): Integer; stdcall;
function DeInitialize(): Integer; stdcall;
function RegisterWindow(var WindowName: PChar): Integer; stdcall;
function GetWindow(handle: THandle): TForm; stdcall;
function Settings():TFrame; stdcall;
function CoreCommand(IdCommand:integer;Sender:TObject; lParam, wParam:variant):integer; stdcall;


var
WindowSoundRecorderForm:TWindowSoundRecorderForm;
WindowSoundRecorderSettingsFrame:TWindowSoundRecorderSettingsFrame;
aHandle:THandle;
aApplication:TApplication;
lAppStorage:TJvAppIniFileStorage;
ldsLogEdit:TDataSource;
lDatabase:TKADaoDatabase;
lDllCommand: TDllCommand;
lMode:string;


implementation






function Initialize(App: TApplication; Scr: TScreen; ActionList: TActionList; AppStorage: TJvAppIniFileStorage; ImageList: TImageList; DllCommand: pointer; Database: TKADaoDatabase; dsLogEdit: TDataSource; dsLog: TDataSource; IMSName:string): Integer; stdcall;
var
 i:integer;
begin
 Application:=App;
 ldsLogEdit:=dsLogEdit;
 lDatabase:=Database;
 lAppStorage:=AppStorage;
 @lDllCommand := DllCommand;
 if not Assigned(WindowSoundRecorderSettingsFrame) then
  begin
   WindowSoundRecorderSettingsFrame:=TWindowSoundRecorderSettingsFrame.Create(aApplication);
   WindowSoundRecorderSettingsFrame.FormStorage.AppStorage :=lAppStorage;
     for i:=0 to WindowSoundRecorderSettingsFrame.AudioIn.DeviceCount-1 do
        WindowSoundRecorderSettingsFrame.cbSoundRecorderDevice.Items.Add(WindowSoundRecorderSettingsFrame.AudioIn.DeviceName[i]);

  end;
 if not Assigned(WindowSoundRecorderForm) then
   begin
     WindowSoundRecorderForm:=TWindowSoundRecorderForm.Create(Application,ldsLogEdit,IMSName);
     WindowSoundRecorderForm.MP3Out.FileName:=ExtractFilePath(Application.Exename)+'Data\Records\Current.mp3';
   end;
 Result:=1;
end;

function DeInitialize():integer; stdcall;
begin
 if Assigned(WindowSoundRecorderForm) then
   WindowSoundRecorderForm.Free;
 if Assigned(WindowSoundRecorderSettingsFrame) then
   WindowSoundRecorderSettingsFrame.Free;
 Result:=1;
end;


function RegisterWindow(var WindowName : PChar):integer; stdcall;
begin
 WindowName:=PChar('WindowSoundRecorder');
 Result:=1;
end;


function GetWindow(handle: THandle): TForm; stdcall;
begin
 result:=WindowSoundRecorderForm;
end;

function Settings():TFrame; stdcall;
begin
  result:=WindowSoundRecorderSettingsFrame;
end;



function CoreCommand(IdCommand:integer;Sender:TObject; lParam, wParam:variant):integer; stdcall;
begin
 case IdCommand of
   CA_SAVE_QSO     : if Assigned(WindowSoundRecorderForm) then
                         if not WindowSoundRecorderSettingsFrame.WindowSoundRecorder_rbManual.Checked then
                          WindowSoundRecorderForm.aSoundRecorderStopExecute(WindowSoundRecorderForm);
   CA_CANCEL_QSO   : if Assigned(WindowSoundRecorderForm) then
                       if not WindowSoundRecorderSettingsFrame.WindowSoundRecorder_rbManual.Checked then
                               WindowSoundRecorderForm.MP3Out.Stop(False);
   CA_NEW_QSO      : if Assigned(WindowSoundRecorderForm) then
                        WindowSoundRecorderForm.NewQSO;


end;

end;

end.




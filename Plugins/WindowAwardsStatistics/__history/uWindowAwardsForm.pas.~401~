unit uWindowAwardsForm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  JvThread, ShellApi, JvExControls, StdCtrls, uWindowPluginForm,
  Dialogs, uUtils, ExtCtrls, DBGridEhGrouping, MemTableDataEh, Db, MemTableEh,
  GridsEh, DBGridEh, ComCtrls, ToolWin, IniFiles, KDaoTable, JvMemoryDataset,
  Menus, LMDDckSite, JvExStdCtrls, JvCombobox, CheckCombo, ActnList, ImgList,
  fcToolBar, fcCube, fcCustomGrid, fcGrid, fcSlice, DBTables, fcTypes,
  fcOptionsPanel, fs_ipascal, fs_iinterpreter, JvDBLookup, jvStrUtils, uPluginHeaders,
  Mask, JvExMask, JvToolEdit, DSCollPanel, NLDSideBar, CheckLst, JvExCheckLst,
  JvCheckListBox, JvComponentBase, JvFormPlacement,JvAppIniStorage;

type

  TawdValue = class
    Worked: integer;
    Sended: integer;
    Confirmed: integer;
  end;

  TWindowAwardsForm = class(TWindowPluginForm)
    dsAwards: TDataSource;
    qryAwards: TKADaoTable;
    qryBands: TKADaoTable;
    PopupMenu1: TPopupMenu;
    N11: TMenuItem;
    N21: TMenuItem;
    pnlMainToolbar: TPanel;
    tbLogMain: TToolBar;
    tbFilter: TToolButton;
    tbSearchAllBook: TToolButton;
    ToolButton2: TToolButton;
    ToolButton3: TToolButton;
    tbColorize: TToolButton;
    Panel10: TPanel;
    lbFilter: TLabel;
    ilAwards: TImageList;
    alAwards: TActionList;
    aAwardsRefresh: TAction;
    aAwardAllBook: TAction;
    dblcAward: TJvDBLookupCombo;
    qryAwardsList: TKADaoTable;
    dsAwardsList: TDataSource;
    PageControl1: TPageControl;
    tsAwards: TTabSheet;
    tsCustomStatistics: TTabSheet;
    dbgAwards: TDBGridEh;
    cdsAwards: TMemTableEh;
    aAwardColorize: TAction;
    ToolButton1: TToolButton;
    Action1: TAction;
    pnlFilter: TNLDSideBar;
    cpgFilter: TCategoryPanelGroup;
    cpFields: TCategoryPanel;
    cpQSLType: TCategoryPanel;
    cpModes: TCategoryPanel;
    clbFields: TJvCheckListBox;
    clbQSLType: TJvCheckListBox;
    qryModes: TKADaoTable;
    clbModes: TJvCheckListBox;
    qryStations: TKADaoTable;
    FormStorageOnExit: TJvFormStorage;
    FormStorage: TJvFormStorage;
    procedure tbSourceTelnetClick(Sender: TObject);
    procedure aAwardsRefreshExecute(Sender: TObject);
    procedure aAwardAllBookExecute(Sender: TObject);
    procedure dbgAwardsGetCellParams(Sender: TObject; Column: TColumnEh; AFont: TFont; var Background: TColor; State: TGridDrawState);
    procedure aAwardColorizeExecute(Sender: TObject);
    procedure dbgAwardsDblClick(Sender: TObject);
    procedure cpgFilterMouseLeave(Sender: TObject);
    procedure dbgAwardsCellClick(Column: TColumnEh);
    procedure dbgAwardsTitleClick(Column: TColumnEh);
    procedure dblcAwardClick(Sender: TObject);
    procedure aAwardsRefreshUpdate(Sender: TObject);
    procedure dbgAwardsColWidthsChanged(Sender: TObject);
    procedure dbgAwardsMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
  private
    bColorize: boolean;
    awdValue: TawdValue;
    sAwardFieldName: string;
    bSearchAllBook: boolean;
    Selected: array of boolean;
    BandFieldStartIndex:integer;
    CurrentCol:integer;
    bRefreshed:boolean;
    bLoaded:boolean;
    bColChanged:boolean;
    procedure HideFilter;
    procedure BuildColumns();
    function BuildQuery(): string;
    procedure Refresh;
    procedure BandGetText(Sender: TField; var Text: string; DisplayText: boolean);
    function GetSelectTable: string;
  public
    StationId: integer;
    StationParentId: integer;
    procedure Loaded;
    procedure OptionsChanged;
    procedure SaveGrid;
   end;

var
  WindowAwardsForm: TWindowAwardsForm;
  sd: TFieldType;

implementation

uses uWindowAwards;
{$R *.dfm}

procedure TWindowAwardsForm.aAwardAllBookExecute(Sender: TObject);
begin
  HideFilter;
  bSearchAllBook := not bSearchAllBook;
  tbSearchAllBook.Down := bSearchAllBook;
end;

procedure TWindowAwardsForm.aAwardColorizeExecute(Sender: TObject);
begin
  HideFilter;
  bColorize := not bColorize;
  tbColorize.Down := bColorize;
  dbgAwards.Repaint;
end;

procedure TWindowAwardsForm.aAwardsRefreshExecute(Sender: TObject);
begin
  HideFilter;
  { fcCube1.Active:=True;
    fcSlice1.BeginUpdate;

    fcSlice1.AddFieldTo('status', 'Ï', rf_CapFacts, af_Sum);

    fcSlice1.AddFieldTo(sMeasuresFieldName, '', rf_CapXAx);

    fcSlice1.EndUpdate; }

  Refresh;
end;

procedure TWindowAwardsForm.aAwardsRefreshUpdate(Sender: TObject);
begin
aAwardsRefresh.Enabled:=dblcAward.KeyValue<>null;
end;


procedure TWindowAwardsForm.BandGetText(Sender: TField; var Text: string; DisplayText: boolean);
begin
  if (TRefObjectField(Sender).Value = nil) or bColorize then
    Text := ''
  else
  begin
    awdValue := TawdValue(TRefObjectField(Sender).Value);
    Text := IntToStr(awdValue.Worked) + ' [' + IntToStr(awdValue.Sended) + '.' + IntToStr(awdValue.Confirmed) + ']';
  end;
end;

procedure TWindowAwardsForm.HideFilter;
begin
  If pnlFilter.AutoHide Then
    pnlFilter.Hide;
end;

procedure TWindowAwardsForm.dblcAwardClick(Sender: TObject);
begin
  HideFilter;
end;

procedure TWindowAwardsForm.BuildColumns();
var
  i: integer;
  Field: TRefObjectField;
  sField: TStringField;
  fField: TField;
begin
  cdsAwards.DisableControls;
  cdsAwards.Active := False;

  {
    while cdsAwards.Fields.Count>0 do
    begin
    fField:=cdsAwards.Fields[0];
    cdsAwards.Fields.Remove(fField);
    fField.Free;
    end; }

  cdsAwards.Fields.Clear;
  cdsAwards.FieldDefs.Clear;
  sField := TStringField.Create(nil);
  sField.FieldName := 'FIELD_STATISTICS';
  sField.DisplayLabel := 'FIELD_STATISTICS';
  sField.DisplayWidth:=20;
  sField.DataSet := cdsAwards;
  cdsAwards.FieldDefs.Add('FIELD_STATISTICS', ftString, 20, False);

  sField := TStringField.Create(nil);
  sField.FieldName := 'FIELD_DESCRIPTION';
  sField.DisplayLabel := 'FIELD_DESCRIPTION';
  sField.DataSet := cdsAwards;
  cdsAwards.FieldDefs.Add('FIELD_DESCRIPTION', ftString, 20, False);

  sField := TStringField.Create(nil);
  sField.FieldName := 'FIELD_WORKED_TOTAL';
  sField.DisplayLabel := 'FIELD_WORKED_TOTAL';
  sField.DataSet := cdsAwards;
  cdsAwards.FieldDefs.Add('FIELD_WORKED_TOTAL', ftString, 20, False);


  for i := 0 to clbFields.Count - 1 do
  begin
    if clbFields.Checked[i] then
    begin
      sField := TStringField.Create(nil);
      sField.FieldName := TField(clbFields.Items.Objects[i]).FieldName;
      sField.Name := TField(clbFields.Items.Objects[i]).FieldName;
      sField.DisplayLabel := TField(clbFields.Items.Objects[i]).DisplayLabel;
      sField.DataSet := cdsAwards;
      cdsAwards.FieldDefs.Add(TField(clbFields.Items.Objects[i]).FieldName, ftString, 20, False);
    end;
  end;

  BandFieldStartIndex:=cdsAwards.FieldCount;

  i := 0;

  qryBands.Close;
  qryBands.Open;

  while not qryBands.Eof do
  begin
    inc(i);
    Field := TRefObjectField.Create(nil);
    Field.FieldName := 'Band' + IntToStr(i);
    Field.OnGetText := BandGetText;
    Field.DisplayLabel := FormatFloat('0.##', qryBands.FieldByName('BAND_MHZ').asFloat);
//    Field.DisplayWidth:=11;
    Field.DataSet := cdsAwards;
    cdsAwards.FieldDefs.Add(Field.FieldName, ftUnknown, 20, False);
    qryBands.Next;
  end;

  cdsAwards.CreateDataSet;
  cdsAwards.Open;

{  for i := 3 to dbgAwards.Columns.Count - 4 do
  begin
    dbgAwards.Columns[i].Alignment := taCenter;
 //   dbgAwards.Columns[i].Width := 15;
  end;}
  cdsAwards.EnableControls;

end;

function TWindowAwardsForm.GetSelectTable: string;
var
  sResult: string;
  i: integer;
  sWhereModes: string;
begin

  for i := 0 to clbModes.Count - 1 do
    if clbModes.Checked[i] then
    begin
      if sWhereModes = '' then
        sWhereModes := #39 + clbModes.Items[i] + #39
      else
        sWhereModes := sWhereModes + ',' + #39 + clbModes.Items[i] + #39;
    end;

  if sWhereModes <> '' then
    sWhereModes := ' AND LOG_MODE IN (' + sWhereModes + ') ';

  i := 0;

  if not bSearchAllBook then
    result :=
      '(SELECT  log_id,log_call,log_qso_datetime,log_band_mhz,log_mode,log_qsl_sent,log_eqsl_qsl_sent,log_lotw_qsl_sent,log_dqsl_qsl_sent,log_qsl_rcvd,log_eqsl_qsl_rcvd,log_lotw_qsl_rcvd,log_dqsl_qsl_rcvd, '
      + ' ad.award_data_field_value, ad.award_data_field_description, ' +
      ' log_name,log_dxcc,log_pfx,log_state,log_cnty,log_gridsquare,log_iota,log_cqz,log_ituz,log_mode,log_custom_stat1,log_custom_stat2,log_custom_stat3,log_custom_stat4 ' + ' FROM  awards_data AS ad LEFT OUTER JOIN LOG_' + IntToStr(StationId) +
      ' AS l ON (l.log_dxcc=val(ad.award_data_field_value)  AND l.log_qso_date Between ad.award_data_start_date and award_data_end_date)  WHERE ad.award_id=:award_id ' + sWhereModes + ')'
  else
  begin
    qryStations.Close;
    qryStations.SQL.Text := 'SELECT STATION_ID FROM STATIONS WHERE IS_GROUP=0';
    qryStations.Open;
    while not qryStations.Eof do
    begin
      if i = 0 then
        sResult :=
          ' SELECT  log_id,log_call,log_qso_datetime,log_band_mhz,log_mode,log_qsl_sent,log_eqsl_qsl_sent,log_lotw_qsl_sent,log_dqsl_qsl_sent,log_qsl_rcvd,log_eqsl_qsl_rcvd,log_lotw_qsl_rcvd,log_dqsl_qsl_rcvd, '
          + ' ad.award_data_field_value, ad.award_data_field_description, ' +
          ' log_name,log_dxcc,log_pfx,log_state,log_cnty,log_gridsquare,log_iota,log_cqz,log_ituz,log_mode,log_custom_stat1,log_custom_stat2,log_custom_stat3,log_custom_stat4 ' + ' FROM  awards_data AS ad LEFT OUTER JOIN LOG_' + IntToStr(qryStations.FieldByName('STATION_ID').AsInteger) +
          ' AS l ON (l.log_dxcc=val(ad.award_data_field_value)  AND l.log_qso_date Between ad.award_data_start_date and award_data_end_date)  WHERE ad.award_id=:award_id ' + sWhereModes
      else
        sResult := sResult + ' UNION ALL  SELECT  log_id,log_call,log_qso_datetime,log_band_mhz,log_mode,log_qsl_sent,log_eqsl_qsl_sent,log_lotw_qsl_sent,log_dqsl_qsl_sent,log_qsl_rcvd,log_eqsl_qsl_rcvd,log_lotw_qsl_rcvd,log_dqsl_qsl_rcvd, ' +
          ' ad.award_data_field_value, ad.award_data_field_description, ' + ' log_name,log_dxcc,log_pfx,log_state,log_cnty,log_gridsquare,log_iota,log_cqz,log_ituz,log_mode,log_custom_stat1,log_custom_stat2,log_custom_stat3,log_custom_stat4 ' +
          ' FROM  awards_data AS ad LEFT OUTER JOIN LOG_' + IntToStr(qryStations.FieldByName('STATION_ID').AsInteger) + ' AS l ON (l.log_dxcc=val(ad.award_data_field_value)  AND l.log_qso_date Between ad.award_data_start_date and award_data_end_date)  WHERE ad.award_id=:award_id ' +
          sWhereModes;

      inc(i);
      qryStations.Next;
    end;
    result := '(' + sResult + ') ';
  end;

end;

function TWindowAwardsForm.BuildQuery(): string;
var
  sTableSQL: string;
  sInnerSQL: string;
  sInnerPattern: string;
  sAdditionFieldList: string;
  sTable: string;
  i: integer;
  sQSLsent, sQSLrcvd: string;
  sQSLSuffix: string;
begin
  sAwardFieldName := 'LOG_' + qryAwardsList.FieldByName('AWARD_DATA_FIELD').AsString;
  sd := ldsLog.DataSet.FieldByName(sAwardFieldName).DataType;

  for i := 0 to clbFields.Count - 1 do
    if clbFields.Checked[i] then
    begin
      sAdditionFieldList := sAdditionFieldList + ' , ' + TField(clbFields.Items.Objects[i]).FieldName;
    end;

  for i := 0 to clbQSLType.Count - 1 do
    if clbQSLType.Checked[i] then
    begin
      if i = 0 then
        sQSLSuffix := ''
      else
        sQSLSuffix := '_qsl';
      if sQSLsent = '' then
      begin
        sQSLsent := 'l.log_' + clbQSLType.Items[i] + sQSLSuffix + '_sent=''Y''';
        sQSLrcvd := 'l.log_' + clbQSLType.Items[i] + sQSLSuffix + '_rcvd=''Y''';
      end
      else
      begin
        sQSLsent := sQSLsent + ' or l.log_' + clbQSLType.Items[i] + sQSLSuffix + '_sent=''Y''';
        sQSLrcvd := sQSLrcvd + ' or l.log_' + clbQSLType.Items[i] + sQSLSuffix + '_rcvd=''Y''';
      end;
    end;

  if sQSLsent = '' then
  begin
    sQSLsent := '0';
    sQSLrcvd := '0';
  end;

  sTable := GetSelectTable;

  result := 'SELECT log_band_mhz, award_data_field_value, award_data_field_description, Count(log_id) AS count_rec, ' + 'Sum(IIf(' + sQSLsent + ',1,0)) AS qsl_sent, ' + 'Sum(IIf(' + sQSLrcvd + ',1,0)) AS qsl_rcvd ' + sAdditionFieldList +
    ' FROM ( SELECT * FROM  ' + sTable + ') GROUP BY log_band_mhz, award_data_field_description, award_data_field_value ' + sAdditionFieldList + ' ORDER BY award_data_field_value';

end;

procedure TWindowAwardsForm.Refresh;
var
  sFiles: TIniFile;
  sSection: TStringList;
  sSectionValues: TStringList;
  i: integer;
  OldValue: string;
  WorkedTotal:integer;

  procedure SetValueByBand(BandName: string; Value: TObject; TypeValue: integer);
  var
    j: integer;
    sCount: string;
    sValue: string;
  begin
    for j := 0 to dbgAwards.FieldCount - 1 do
    begin
      if dbgAwards.Fields[j].DisplayLabel = BandName then
      begin
        sValue := dbgAwards.Fields[j].AsString;
        case TypeValue of
          0:
            begin
              TRefObjectField(dbgAwards.Fields[j]).Value := Value;
            end;
          1:
            begin
            end;
        end;
      end;
    end;
  end;

begin
  Screen.Cursor := crHourGlass;
  try
    bRefreshed:=True;
    BuildColumns();
    qryAwards.Close;
    qryAwards.SQL.Text := BuildQuery();
    // qryAwards.SQL.SaveToFile('d:\!\1sql');

    qryAwards.Params.ParamByName('AWARD_ID').AsInteger := dblcAward.KeyValue;
    qryAwards.Open;
    cdsAwards.DisableControls;
    while not qryAwards.Eof do
    begin
      if OldValue <> qryAwards.FieldByName('award_data_field_value').AsString then
      begin
       if  not cdsAwards.IsEmpty then
         begin
        WorkedTotal:=0;
        cdsAwards.Edit;
        for i:=BandFieldStartIndex to cdsAwards.FieldCount-1 do
         if TRefObjectField(cdsAwards.Fields[i]).Value<>nil then
           WorkedTotal:=WorkedTotal+TawdValue(TRefObjectField(cdsAwards.Fields[i]).Value).Worked;
        cdsAwards.FieldByName('FIELD_WORKED_TOTAL').AsString := IntToStr(WorkedTotal);
        cdsAwards.Post;
         end;
        cdsAwards.Append;
        cdsAwards.FieldByName('FIELD_STATISTICS').AsString := qryAwards.FieldByName('award_data_field_value').AsString;
        cdsAwards.FieldByName('FIELD_DESCRIPTION').AsString := qryAwards.FieldByName('award_data_field_description').AsString;
        cdsAwards.FieldByName('FIELD_DESCRIPTION').AsString := qryAwards.FieldByName('award_data_field_description').AsString;
        for i := 0 to clbFields.Count - 1 do
          if clbFields.Checked[i] then
          begin
            cdsAwards.FieldByName(TField(clbFields.Items.Objects[i]).FieldName).AsString := qryAwards.FieldByName(TField(clbFields.Items.Objects[i]).FieldName).AsString;
          end;
        awdValue := TawdValue.Create;
        awdValue.Worked := qryAwards.FieldByName('count_rec').AsInteger;
        awdValue.Sended := qryAwards.FieldByName('qsl_sent').AsInteger;
        awdValue.Confirmed := qryAwards.FieldByName('qsl_rcvd').AsInteger;
        SetValueByBand(FormatFloat('0.##', qryAwards.FieldByName('log_band_mhz').asFloat), awdValue, 0);
        cdsAwards.Post;
        OldValue := qryAwards.FieldByName('award_data_field_value').AsString;
      end
      else
      begin
        cdsAwards.Edit;
        awdValue := TawdValue.Create;
        awdValue.Worked := qryAwards.FieldByName('count_rec').AsInteger;
        awdValue.Sended := qryAwards.FieldByName('qsl_sent').AsInteger;
        awdValue.Confirmed := qryAwards.FieldByName('qsl_rcvd').AsInteger;
        SetValueByBand(FormatFloat('0.##', qryAwards.FieldByName('log_band_mhz').asFloat), awdValue, 0);
        cdsAwards.Post;
      end;
      qryAwards.Next;
    end;
    cdsAwards.First;
    cdsAwards.EnableControls;
    dbgAwards.RestoreColumnsLayoutIni(ExtractFilePath(Application.ExeName) + TJvAppIniFileStorage(FormStorage.AppStorage).FileName, 'WindowAwardsForm', [crpColIndexEh, crpColWidthsEh, crpSortMarkerEh, crpColVisibleEh, crpDropDownRowsEh, crpDropDownWidthEh, crpRowPanelColPlacementEh]);
  finally
    bRefreshed:=False;
    Screen.Cursor := crDefault;
  end;
end;

procedure TWindowAwardsForm.cpgFilterMouseLeave(Sender: TObject);
begin
  PostMessage(Parent.Handle, CM_MOUSELEAVE, 0, 0);
end;


procedure TWindowAwardsForm.dbgAwardsCellClick(Column: TColumnEh);
begin
  HideFilter;
end;

procedure TWindowAwardsForm.dbgAwardsColWidthsChanged(Sender: TObject);
var
 i,j:integer;
begin
if bRefreshed or not bLoaded then Exit;
bColChanged:=true;
{  Width:=dbgAwards.Columns[CurrentCol].Width;
  for i:=BandFieldStartIndex to cdsAwards.FieldCount-1 do
    for j:=0 to dbgAwards.Columns.Count - 1 do
      if dbgAwards.Columns[j].Field=cdsAwards.Fields[i] then
        begin
          dbgAwards.Columns[i].Width:=Width;
          break;
        end;}


//    dbgAwards.Columns[cdsAwards.Fields[i].DisplayLabel].Width:=Width;

end;

procedure TWindowAwardsForm.dbgAwardsDblClick(Sender: TObject);
var
  lParam, wParam: variant;
  sFilter: String;
begin
  sFilter := sAwardFieldName + '=' + cdsAwards.FieldByName('FIELD_STATISTICS').AsString;
  lParam := sFilter;
  lDllCommand(DC_SET_LOG_FILTER, Self, lParam, wParam);
end;

procedure TWindowAwardsForm.dbgAwardsGetCellParams(Sender: TObject; Column: TColumnEh; AFont: TFont; var Background: TColor; State: TGridDrawState);
var
  i: integer;
begin
  if (csDestroying in TDBGridEh(Sender).ComponentState) or not(Column.Field is TRefObjectField) or not bColorize then
    exit;

  if TRefObjectField(TDBGridEh(Sender).DataSource.DataSet.FieldByName(Column.FieldName)).Value = nil then
    exit;

  if (TawdValue(TRefObjectField(TDBGridEh(Sender).DataSource.DataSet.FieldByName(Column.FieldName)).Value).Worked > 0) and ((TawdValue(TRefObjectField(TDBGridEh(Sender).DataSource.DataSet.FieldByName(Column.FieldName)).Value).Sended = 0) and
      (TawdValue(TRefObjectField(TDBGridEh(Sender).DataSource.DataSet.FieldByName(Column.FieldName)).Value).Confirmed = 0)) then
  begin
    Background := 11075583;
    AFont.Color := 11075583;
  end;

  if (TawdValue(TRefObjectField(TDBGridEh(Sender).DataSource.DataSet.FieldByName(Column.FieldName)).Value).Worked > 0) and ((TawdValue(TRefObjectField(TDBGridEh(Sender).DataSource.DataSet.FieldByName(Column.FieldName)).Value).Sended > 0) and
      (TawdValue(TRefObjectField(TDBGridEh(Sender).DataSource.DataSet.FieldByName(Column.FieldName)).Value).Confirmed = 0)) then
  begin
    Background := 9671679;
    AFont.Color := 9671679;
  end;

  if ((TawdValue(TRefObjectField(TDBGridEh(Sender).DataSource.DataSet.FieldByName(Column.FieldName)).Value).Sended > 0) and (TawdValue(TRefObjectField(TDBGridEh(Sender).DataSource.DataSet.FieldByName(Column.FieldName)).Value).Confirmed > 0)) then
  begin
    Background := 11206570;
    AFont.Color := 11206570;
  end;
end;

procedure TWindowAwardsForm.dbgAwardsMouseUp(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  P: TPoint;
begin
  GetCursorPos(P);
  P := dbgAwards.ScreenToClient(P);
  CurrentCol := dbgAwards.MouseCoord(P.X-3, P.Y).X;


  bColChanged:=true;
{  Width:=dbgAwards.Columns[CurrentCol].Width;
  for i:=BandFieldStartIndex to cdsAwards.FieldCount-1 do
    for j:=0 to dbgAwards.Columns.Count - 1 do
      if dbgAwards.Columns[j].Field=cdsAwards.Fields[i] then
        begin
          dbgAwards.Columns[i].Width:=Width;
          break;
        end;}

end;

procedure TWindowAwardsForm.dbgAwardsTitleClick(Column: TColumnEh);
begin
  HideFilter;
end;




procedure TWindowAwardsForm.tbSourceTelnetClick(Sender: TObject);
var
  sFiles: TIniFile;
  sSection: TStringList;
  sSectionValues: TStringList;
  i: integer;
begin
  sFiles := TIniFile.Create('c:\Users\melnichenko\Documents\RAD Studio\Projects\UT4UKW\LogBook\Distr\Data\Awards\DXCC.awd');

  sSection := TStringList.Create;
  sSectionValues := TStringList.Create;

  sFiles.ReadSection('Data', sSection);
  sFiles.ReadSectionValues('Data', sSectionValues);
  cdsAwards.DisableControls;
  qryAwards.SQL.Text := BuildQuery();
  qryAwards.Open;
  for i := 0 to sSection.Count - 1 do
  begin
    cdsAwards.Append;
    cdsAwards.FieldByName('FIELD_STATISTICS').AsString := sSection.Strings[i];
    cdsAwards.FieldByName('FIELD_DESCRIPTION').AsString := sSectionValues[i];
    cdsAwards.FieldByName('QTY_WKD').AsInteger := 0;
    cdsAwards.Post;
  end;
  while not qryAwards.Eof do
  begin
    if cdsAwards.Locate('FIELD_STATISTICS', qryAwards.FieldByName('LOG_DXCC').AsInteger, []) then
    begin
      cdsAwards.Edit;
      cdsAwards.FieldByName('QTY_WKD').AsInteger := qryAwards.Fields[3].AsInteger;
      cdsAwards.Post;
    end;
    qryAwards.Next;
  end;

  qryAwards.Close;
  cdsAwards.EnableControls;
  sFiles.Free;
  sSection.Free;
  sSectionValues.Free;

end;


procedure TWindowAwardsForm.Loaded;
begin
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_CALL').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_CALL'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_NAME').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_NAME'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_QTH').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_QTH'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_DXCC').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_DXCC'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_PFX').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_PFX'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_STATE').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_STATE'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_CNTY').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_CNTY'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_GRIDSQUARE').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_GRIDSQUARE'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_IOTA').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_IOTA'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_CQZ').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_CQZ'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_ITUZ').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_ITUZ'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_MODE').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_MODE'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_CUSTOM_STAT1').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_CUSTOM_STAT1'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_CUSTOM_STAT2').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_CUSTOM_STAT2'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_CUSTOM_STAT3').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_CUSTOM_STAT3'));
  clbFields.Items.AddObject(ldsLog.DataSet.FieldByName('LOG_CUSTOM_STAT4').DisplayLabel, ldsLog.DataSet.FieldByName('LOG_CUSTOM_STAT4'));

  clbModes.Items.Clear;
  qryModes.Close;
  qryModes.Open;
  while not qryModes.Eof do
  begin
    clbModes.Items.Add(qryModes.FieldByName('MODE_NAME').AsString);
    qryModes.Next;
  end;

  clbQSLType.Items.Add('QSL');
  clbQSLType.Items.Add('LoTW');
  clbQSLType.Items.Add('eQSL');
  clbQSLType.Items.Add('dQSL');
  bLoaded:=True;
end;

procedure TWindowAwardsForm.OptionsChanged;
begin
  clbModes.Items.Clear;
  qryModes.Close;
  qryModes.Open;
  while not qryModes.Eof do
  begin
    clbModes.Items.Add(qryModes.FieldByName('MODE_NAME').AsString);
    qryModes.Next;
  end;
end;

procedure TWindowAwardsForm.SaveGrid;
var
  S: string;
  i: integer;
begin
  with dbgAwards.Columns do
  begin
    for i := 0 to Count - 1 do
    begin
      S := Format('%d,%d,%d,%d,%d,%d,%d,%d,%d', [Items[i].Index, Items[i].Width, integer(Items[i].Title.SortMarker), integer(Items[i].Visible), Items[i].Title.SortIndex, Items[i].DropDownRows, Items[i].DropDownWidth, Items[i].InRowLinePos, Items[i].InRowLineHeight]);
      if S <> '' then
      begin
        if ((S[1] = '"') and (S[Length(S)] = '"')) or ((S[1] = '''') and (S[Length(S)] = '''')) then
          S := '"' + S + '"';
      end;
      FormStorage.WriteString('dbgAwards.' + Items[i].FieldName, S);
    end;
  end;
end;


end.

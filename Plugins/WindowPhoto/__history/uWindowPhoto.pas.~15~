unit uWindowPhoto;

interface

uses
  SysUtils,
  Forms,
  uPluginHeaders,
  JvAppIniStorage,
  Classes,
  Windows,
  Controls,
  ActnList,
  DB,
  Variants,
  KDaoDatabase,
  uWindowPhotoForm;

function Initialize(App : TApplication;
                          Scr : TScreen;
                          ActionList:TActionList;
                          AppStorage:TJvAppIniFileStorage;
                          ImageList:TImageList;
                          DllCommand:pointer;
                          Database:TKADaoDatabase;
                          dsLogEdit:TDataSource;
                          dsLog:TDataSource
                          ): Integer; stdcall;
function DeInitialize(): Integer; stdcall;
function RegisterWindow(var WindowName: PChar): Integer; stdcall;
function GetWindow(handle: THandle;IMSName:string): TForm; stdcall;
function CoreCommand(IdCommand:integer;Sender:TObject; lParam, wParam:variant):integer; stdcall;


var
WindowPhotoForm:TWindowPhotoForm;
aHandle:THandle;
aApplication:TApplication;
lAppStorage:TJvAppIniFileStorage;
ldsLogEdit:TDataSource;
lDatabase:TKADaoDatabase;
lDllCommand: TDllCommand;
lMode:string;


implementation






function Initialize(App : TApplication;
                          Scr : TScreen;
                          ActionList:TActionList;
                          AppStorage:TJvAppIniFileStorage;
                          ImageList:TImageList;
                          DllCommand:pointer;
                          Database:TKADaoDatabase;
                          dsLogEdit:TDataSource;
                          dsLog:TDataSource
                          ): Integer; stdcall;
begin
 Application:=App;
 ldsLogEdit:=dsLogEdit;
 lDatabase:=Database;
 lAppStorage:=AppStorage;
 @lDllCommand := DllCommand;
 Result:=1;
end;

function DeInitialize():integer; stdcall;
begin
 if Assigned(WindowPhotoForm) then
   WindowPhotoForm.Free;
 Result:=1;
end;


function RegisterWindow(var WindowName : PChar):integer; stdcall;
begin
 WindowName:=PChar('WindowPhoto');
 Result:=1;
end;


function GetWindow(handle: THandle;IMSName:string): TForm; stdcall;
begin
 if not Assigned(WindowPhotoForm) then
   begin
     WindowPhotoForm:=TWindowPhotoForm.Create(Application,ldsLogEdit,IMSName);
{     WindowPhotoForm.FormStorage.AppStorage:=lAppStorage;
     WindowPhotoForm.qryBands.Database:=lDataBase;
     WindowPhotoForm.qryModes.Database:=lDataBase;
     WindowPhotoForm.qryBandGrid.Database:=lDataBase;
     WindowPhotoForm.InitData;
     lMode:=lAppStorage.ReadString('Options\Mode','');
     WindowPhotoForm.ModeChanged;}
{     WindowPhotoForm.qryLastContacts.Database:=lDataBase;
     WindowPhotoForm.FormStorage.AppStorage:=lAppStorage;}
   end;
 result:=WindowPhotoForm;
end;


procedure DoWindowShow;
begin
{ if Assigned(WindowPhotoForm) then
     WindowPhotoForm.CallChanged;}
end;



function CoreCommand(IdCommand:integer;Sender:TObject; lParam, wParam:variant):integer; stdcall;
begin
 case IdCommand of
   CA_CALL_INFO : if Assigned(WindowPhotoForm) then WindowPhotoForm.CallInfo;
   CA_CANCEL_QSO : if Assigned(WindowPhotoForm) then WindowPhotoForm.CancelQSO;
   CA_NEW_QSO : if Assigned(WindowPhotoForm) then WindowPhotoForm.CancelQSO;
 end;
end;

end.




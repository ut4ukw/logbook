unit uWindowQSLInfo;

interface

uses
  ShareMem,
  SysUtils,
  Forms,
  uPluginHeaders,
  JvAppIniStorage,
  Classes,
  Windows,
  Controls,
  ActnList,
  DB,
  ADODB,
  uWindowQSLInfoForm;



function Initialize(App : TApplication;
                          Scr : TScreen;
                          ActionList:TActionList;
                          AppStorage:TJvAppIniFileStorage;
                          ImageList:TImageList;
                          DllCommand:pointer;
                          Connection:TADOConnection;
                          dsLogEdit:TDataSource;
                          dsLog:TDataSource
                    ): Integer; stdcall;
function DeInitialize(): Integer; stdcall;
function RegisterWindow(var WindowName: PChar): Integer; stdcall;
function GetWindow(handle: THandle): TForm; stdcall;
function CoreCommand(IdCommand:integer;Sender:TObject; lParam, wParam:variant):integer; stdcall;


var
WindowQSLInfoForm:TWindowQSLInfoForm;
aHandle:THandle;
aApplication:TApplication;
lAppStorage:TJvAppIniFileStorage;
ldsLogEdit:TDataSource;
lConnection:TADOConnection;
lDllCommand: TDllCommand;
lInitBand,lInitMode:integer;
LangId:integer;



implementation






function Initialize(App : TApplication;
                          Scr : TScreen;
                          ActionList:TActionList;
                          AppStorage:TJvAppIniFileStorage;
                          ImageList:TImageList;
                          DllCommand:pointer;
                          Connection:TADOConnection;
                          dsLogEdit:TDataSource;
                          dsLog:TDataSource
                    ): Integer; stdcall;
begin
 Application:=App;
 ldsLogEdit:=dsLogEdit;
 lConnection:=Connection;
 lAppStorage:=AppStorage;
 @lDllCommand := DllCommand;
 Result:=1;
end;

function DeInitialize():integer; stdcall;
begin
 if Assigned(WindowQSLInfoForm) then
   WindowQSLInfoForm.Free;
 Result:=1;
end;


function RegisterWindow(var WindowName : PChar):integer; stdcall;
begin
 WindowName:=PChar('WindowQSLInfo');
 Result:=1;
end;


function GetWindow(handle: THandle):TForm; stdcall;
begin
 if not Assigned(WindowQSLInfoForm) then
   begin
     WindowQSLInfoForm:=TWindowQSLInfoForm.Create(Application);
     with WindowQSLInfoForm do
     begin
       dbQSLSendType.DataSource:=ldsLogEdit;
       qryQSLSendType.Connection:=lConnection;
       qryQSLSendType.Parameters.ParamByName('LANG_ID').Value:=
     end;
 {    WindowQSLInfoForm.dbQSLSendType.DataSource:=ldsLogEdit;
     WindowQSLInfoForm.dbQSLSendVia.DataSource:=ldsLogEdit;
     WindowQSLInfoForm.dbQSLSendViaRoute.DataSource:=ldsLogEdit;
     WindowQSLInfoForm.dbdQSLSendDate.DataSource:=ldsLogEdit;
     WindowQSLInfoForm.dbQSLRcvType.DataSource:=ldsLogEdit;
     WindowQSLInfoForm.dbQSLRcvVia.DataSource:=ldsLogEdit;
     WindowQSLInfoForm.dbdQSLRcvDate.DataSource:=ldsLogEdit;

     WindowQSLInfoForm.dbEQSLSendType.DataSource:=ldsLogEdit;
     WindowQSLInfoForm.dbdEQSLSendDate.DataSource:=ldsLogEdit;
     WindowQSLInfoForm.dbEQSLRcvType.DataSource:=ldsLogEdit;
     WindowQSLInfoForm.dbdEQSLRcvDate.DataSource:=ldsLogEdit;
     WindowQSLInfoForm.dbLQSLSendType.DataSource:=ldsLogEdit;
     WindowQSLInfoForm.dbdLQSLSendDate.DataSource:=ldsLogEdit;
     WindowQSLInfoForm.dbLQSLRcvType.DataSource:=ldsLogEdit;
     WindowQSLInfoForm.dbdLQSLRcvDate.DataSource:=ldsLogEdit;
     WindowQSLInfoForm.qryQSLSendType.Database:=lDatabase;
     WindowQSLInfoForm.qryQSLRcvType.Database:=lDatabase;
     WindowQSLInfoForm.qryQSLSendVia.Database:=lDatabase;
     WindowQSLInfoForm.qryQSLRcvVia.Database:=lDatabase;
     WindowQSLInfoForm.qryEQSLSendType.Database:=lDatabase;
     WindowQSLInfoForm.qryEQSLRcvType.Database:=lDatabase;
     WindowQSLInfoForm.qryLQSLSendType.Database:=lDatabase;
     WindowQSLInfoForm.qryLQSLRcvType.Database:=lDatabase;        }
   end;
 result:=WindowQSLInfoForm;
end;



procedure DoWindowShow;
begin
 WindowQSLInfoForm.qryQSLSendType.Open;
{ WindowQSLInfoForm.qryQSLRcvType.Open;
 WindowQSLInfoForm.qryQSLSendVia.Open;
 WindowQSLInfoForm.qryQSLRcvVia.Open;
 WindowQSLInfoForm.qryEQSLSendType.Open;
 WindowQSLInfoForm.qryEQSLRcvType.Open;
 WindowQSLInfoForm.qryLQSLSendType.Open;
 WindowQSLInfoForm.qryLQSLRcvType.Open;
 WindowQSLInfoForm.qryQSLSendType.FetchAll;
 WindowQSLInfoForm.qryQSLRcvType.FetchAll;
 WindowQSLInfoForm.qryQSLSendVia.FetchAll;
 WindowQSLInfoForm.qryQSLRcvVia.FetchAll;
 WindowQSLInfoForm.qryEQSLSendType.FetchAll;
 WindowQSLInfoForm.qryEQSLRcvType.FetchAll;
 WindowQSLInfoForm.qryLQSLSendType.FetchAll;
 WindowQSLInfoForm.qryLQSLRcvType.FetchAll;    }
end;

procedure DoWindowHide;
begin
{ WindowQSLInfoForm.qryQSLSendType.Close;
{ WindowQSLInfoForm.qryQSLRcvType.Close;
 WindowQSLInfoForm.qryQSLSendVia.Close;
 WindowQSLInfoForm.qryQSLRcvVia.Close;
 WindowQSLInfoForm.qryEQSLSendType.Close;
 WindowQSLInfoForm.qryEQSLRcvType.Close;
 WindowQSLInfoForm.qryLQSLSendType.Close;
 WindowQSLInfoForm.qryLQSLRcvType.Close; }
end;


function CoreCommand(IdCommand:integer;Sender:TObject; lParam, wParam:variant):integer; stdcall;
begin
 case IdCommand of
   CC_WINDOW_SHOW     : DoWindowShow;
   CC_WINDOW_HIDE     : DoWindowHide;
 end;
end;




end.




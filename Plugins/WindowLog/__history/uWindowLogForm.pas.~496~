unit uWindowLogForm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, ComCtrls, ToolWin, ImgList, DB, JvComponentBase,
  JvFormPlacement, uPluginHeaders,
  DBGridEhGrouping, GridsEh, Contnrs, uUtils,
  DBGridEh, ActnList, Menus, EhLibKaDAO, KDaoTable, uWindowPluginForm,
  uEditFilterName, uViewPicture, KDaoDataBase, ToolCtrlsEh,DBGridEhSimpleFilterDlg;

const
 symb=['a'..'z','A'..'Z','0'..'1'];

type

  TcrDBGridEh=class(TDBGridEh)
  end;

  TWindowLogForm = class(TWindowPluginForm)
    Panel2: TPanel;
    tbLogMain: TToolBar;
    tbFilter: TToolButton;
    Panel10: TPanel;
    FormStorage: TJvFormStorage;
    dbgLog: TDBGridEh;
    pmLog: TPopupMenu;
    mieQSL: TMenuItem;
    miLotW: TMenuItem;
    miQSL: TMenuItem;
    N1: TMenuItem;
    msgDeleteRecord: TLabel;
    N2: TMenuItem;
    ilLog: TImageList;
    ActionList: TActionList;
    aFilter: TAction;
    ToolButton1: TToolButton;
    miImport: TMenuItem;
    N3: TMenuItem;
    miExport: TMenuItem;
    miExportToAdif: TMenuItem;
    miImportFromAdif: TMenuItem;
    N1111: TMenuItem;
    N11111: TMenuItem;
    N4: TMenuItem;
    cbFilters: TComboBox;
    lbFilter: TLabel;
    aFilterSave: TAction;
    WindowLog_EditFilterName: TLabel;
    WindowLog_EditFilterbtnOk: TLabel;
    WindowLog_EditFilterbtnCancel: TLabel;
    FormStorageOnExit: TJvFormStorage;
    dQSL: TMenuItem;
    N5: TMenuItem;
    N6: TMenuItem;
    N7: TMenuItem;
    N1112: TMenuItem;
    N11: TMenuItem;
    N12: TMenuItem;
    N13: TMenuItem;
    N14: TMenuItem;
    N15: TMenuItem;
    N16: TMenuItem;
    N17: TMenuItem;
    N18: TMenuItem;
    ilQSL: TImageList;
    qryQSLImageFiles: TKADaoTable;
    dsLog: TDataSource;
    N111: TMenuItem;
    N112: TMenuItem;
    DAODatabase: TKADaoDatabase;
    qryLog: TKADaoTable;
    qryLogLOG_ID: TAutoIncField;
    qryLogLOG_GRIDSQUARE: TStringField;
    qryLogLOG_QTH: TStringField;
    qryLogLOG_OPERATOR: TStringField;
    qryLogLOG_CALL: TStringField;
    qryLogLOG_FREQ: TFloatField;
    qryLogLOG_QSO_DATE: TDateTimeField;
    qryLogLOG_RST_RCVD: TStringField;
    qryLogLOG_RST_SENT: TStringField;
    qryLogLOG_LAT: TFloatField;
    qryLogLOG_LON: TFloatField;
    qryLogLOG_COMMENT: TStringField;
    qryLogLOG_QSLSDATE: TDateTimeField;
    qryLogLOG_QSLRDATE: TDateTimeField;
    qryLogLOG_ADDRESS: TMemoField;
    qryLogLOG_AGE: TIntegerField;
    qryLogLOG_ARRL_SECT: TStringField;
    qryLogLOG_CNTY: TStringField;
    qryLogLOG_CONTEST_ID: TStringField;
    qryLogLOG_CQZ: TIntegerField;
    qryLogLOG_DXCC: TIntegerField;
    qryLogLOG_IOTA: TStringField;
    qryLogLOG_ITUZ: TIntegerField;
    qryLogLOG_NAME: TStringField;
    qryLogLOG_NOTES: TMemoField;
    qryLogLOG_PFX: TStringField;
    qryLogLOG_PROP_MODE: TStringField;
    qryLogLOG_QSLMSG: TStringField;
    qryLogLOG_QSL_RCVD: TStringField;
    qryLogLOG_QSL_SENT: TStringField;
    qryLogLOG_QSL_VIA: TStringField;
    qryLogLOG_RX_PWR: TIntegerField;
    qryLogLOG_EQSL_QSLRDATE: TDateTimeField;
    qryLogLOG_EQSL_QSLSDATE: TDateTimeField;
    qryLogLOG_EQSL_QSL_RCVD: TStringField;
    qryLogLOG_EQSL_QSL_SENT: TStringField;
    qryLogLOG_LOTW_QSLRDATE: TDateTimeField;
    qryLogLOG_LOTW_QSLSDATE: TDateTimeField;
    qryLogLOG_LOTW_QSL_RCVD: TStringField;
    qryLogLOG_LOTW_QSL_SENT: TStringField;
    qryLogLOG_CONT: TStringField;
    qryLogLOG_MY_NAME: TStringField;
    qryLogLOG_MY_POSTAL_CODE: TStringField;
    qryLogLOG_MY_COUNTRY: TStringField;
    qryLogLOG_BAND: TStringField;
    qryLogLOG_MODE: TStringField;
    qryLogLOG_COUNTRY: TStringField;
    qryLogLOG_CONTINENT: TStringField;
    qryLogLOG_MY_CITY: TStringField;
    qryLogLOG_MY_STREET: TStringField;
    qryLogLOG_MY_GRIDSQUARE: TStringField;
    qryLogLOG_MY_LAT: TFloatField;
    qryLogLOG_MY_LON: TFloatField;
    qryLogLOG_QSL_SENT_VIA: TStringField;
    qryLogLOG_QSL_RCVD_VIA: TStringField;
    qryLogLOG_BAND_MHZ: TFloatField;
    qryLogLOG_DQSL_QSL_SENT: TStringField;
    qryLogLOG_DQSL_RCVD: TStringField;
    qryLogLOG_DQSL_QSLRDATE: TDateTimeField;
    qryLogLOG_DQSL_QSLSDATE: TDateTimeField;
    qryLogLOG_EMAIL: TStringField;
    qryLogLOG_A_INDEX: TIntegerField;
    qryLogLOG_ANT_AZ: TFloatField;
    qryLogLOG_ANT_EL: TSmallintField;
    qryLogLOG_ANT_PATH: TStringField;
    qryLogLOG_BAND_RX: TStringField;
    qryLogLOG_CHECK: TStringField;
    qryLogLOG_CLASS: TStringField;
    qryLogLOG_CONTACTED_OP: TStringField;
    qryLogLOG_CREDIT_SUBMITTED: TStringField;
    qryLogLOG_CREDIT_GRANTED: TStringField;
    qryLogLOG_DISTANCE: TFloatField;
    qryLogLOG_EQ_CALL: TStringField;
    qryLogLOG_FORCE_INIT: TStringField;
    qryLogLOG_FREQ_RX: TFloatField;
    qryLogGUEST_OP: TStringField;
    qryLogLOG_IOTA_ISLAND_ID: TStringField;
    qryLogLOG_K_INDEX: TFloatField;
    qryLogLOG_MAX_BURSTS: TFloatField;
    qryLogLOG_MS_SHOWER: TStringField;
    qryLogLOG_MY_CNTY: TStringField;
    qryLogLOG_MY_CQ_ZONE: TIntegerField;
    qryLogLOG_MY_IOTA: TStringField;
    qryLogLOG_MY_IOTA_ISLAND_ID: TStringField;
    qryLogLOG_MY_ITU_ZONE: TIntegerField;
    qryLogLOG_MY_RIG: TStringField;
    qryLogLOG_MY_SIG: TStringField;
    qryLogLOG_MY_SIG_INFO: TStringField;
    qryLogLOG_MY_STATE: TStringField;
    qryLogLOG_NR_BURSTS: TIntegerField;
    qryLogLOG_NR_PINGS: TIntegerField;
    qryLogLOG_OWNER_CALLSIGN: TStringField;
    qryLogLOG_PRECEDENCE: TStringField;
    qryLogLOG_PUBLIC_KEY: TStringField;
    qryLogLOG_QSO_COMPLETE: TStringField;
    qryLogLOG_QSO_DATE_OFF: TDateTimeField;
    qryLogLOG_QSO_RANDOM: TStringField;
    qryLogLOG_RIG: TStringField;
    qryLogLOG_SAT_MODE: TStringField;
    qryLogLOG_SAT_NAME: TStringField;
    qryLogLOG_SFI: TIntegerField;
    qryLogLOG_SIG: TStringField;
    qryLogLOG_SIG_INFO: TStringField;
    qryLogLOG_SRX: TIntegerField;
    qryLogLOG_SRX_STRING: TStringField;
    qryLogLOG_STATE: TStringField;
    qryLogLOG_STX: TIntegerField;
    qryLogLOG_STX_STRING: TStringField;
    qryLogLOG_SWL: TStringField;
    qryLogLOG_TX_PWR: TIntegerField;
    qryLogLOG_WEB: TStringField;
    qryLogLOG_QSO_TIME: TDateTimeField;
    qryLogLOG_QSO_DATETIME: TDateTimeField;
    procedure dbgLogDblClick(Sender: TObject);
    procedure dbgLogGetCellParams(Sender: TObject; Column: TColumnEh; AFont: TFont; var Background: TColor; State: TGridDrawState);
    procedure aFilterExecute(Sender: TObject);
    procedure ToolButton1Click(Sender: TObject);
    procedure cbFiltersClick(Sender: TObject);
    procedure aFilterSaveUpdate(Sender: TObject);
    procedure aFilterSaveExecute(Sender: TObject);
    procedure dbgLogMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure dbgLogCellClick(Column: TColumnEh);
    procedure dsLogDataChange(Sender: TObject; Field: TField);
    procedure dbgLogKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure dbgLogSelectionChanged(Sender: TObject);
    procedure dbgLogExit(Sender: TObject);
    procedure dbgLogTranslateFilterDialog(Sender: TCustomDBGridEh;
      Dialog: TForm);
    procedure dbgLogDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumnEh; State: TGridDrawState);
    procedure dbgLogKeyPress(Sender: TObject; var Key: Char);
  private
    CurrentCol:integer;
    FViewPicture: TViewPicture;
    FEQSLImagePath: string;
    FDQSLImagePath: string;
    bUseAlternativeColor:boolean;
    ColorAltSent:TColor;
    ColorAltRcvd:TColor;
    ColorAltSentRcvd:TColor;
    procedure UpdateSQLSent(sSent: string);
    function FindColumn(Grid: TDBGridEh; const FieldName: string): TColumnEh;
    function GetGridFilter(Grid: TDBGridEh): string;
    procedure SetGridFilter(Grid: TDBGridEh; const Filter: string; IsApply: boolean);
    procedure ShowPicture(iType: Integer); // 0-eQSL 1-dQSL
  public
    LogTableName: string;
    iStationId: Integer;
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
    procedure ActionRefreshUpdate(Sender: TObject);
    procedure DeleteQSO;
    procedure RefreshLog(lParam, wParam: Integer);
    procedure ChangeStation(StationId: Integer);
    procedure EditQSO(Sender: TObject);
    procedure CancelQSO;
    procedure SaveQSO;
    procedure SaveGrid;
    procedure SentQSL(Sender: TObject);
    procedure RcvdQSL(Sender: TObject);
    procedure IgnoreQSL(Sender: TObject);
    procedure GetSelectedRecords(var lParam: variant; var wParam: variant);
    procedure ShowNeqEQSL;
    procedure PrintQueueAddQSO(Sender: TObject);
    procedure InitGridColors;
    procedure InitData;
    procedure SetImagesPath;
    procedure Loaded;
    procedure GotoRecord(lParam: variant);
  end;

var
  WindowLogForm: TWindowLogForm;
  EditFilterName: TEditFilterName;

implementation

{$R *.dfm}

uses uWindowLog;

procedure TWindowLogForm.Notification(AComponent: TComponent; Operation: TOperation);
begin
  inherited;
  if (AComponent = FViewPicture) and (Operation = opRemove) then
  begin
    // FChild is about to be freed, so set reference to Child to nil
    FViewPicture := nil;
  end;
end;

procedure TWindowLogForm.ActionRefreshUpdate(Sender: TObject);
begin
  TAction(Sender).Enabled := Self.Parent.Visible and (not dbgLog.DataSource.DataSet.IsEmpty) and (not(ldsLogEdit.DataSet.State = dsEdit));
end;

procedure TWindowLogForm.ToolButton1Click(Sender: TObject);
begin
  { if ToolButton1.Down then
    begin
    dbgLog.DataSource.DataSet.Close;
    TKadaoTable(dbgLog.DataSource.DataSet).SQL.Text:='SELECT * from log_1 l1 where (l1.log_qsl_sent<>''Y'' OR l1.log_qsl_sent IS NULL) and l1.log_call not in (select l2.log_call from log_1 l2 where l2.log_qsl_sent=''Y'')';
    dbgLog.DataSource.DataSet.Open;
    end
    else
    begin
    dbgLog.DataSource.DataSet.Close;
    TKadaoTable(dbgLog.DataSource.DataSet).SQL.Text:='SELECT * from log_1';
    dbgLog.DataSource.DataSet.Open;
    end; }
  // ShowNeqEQSL;

  // ShowMessage(dbgLog.DataSource.DataSet.FieldByName('Log_Call').DisplayLabel);
end;

procedure TWindowLogForm.dbgLogCellClick(Column: TColumnEh);
var
  P: TPoint;
begin
  GetCursorPos(P);
  P := dbgLog.ScreenToClient(P);
  CurrentCol:=dbgLog.MouseCoord(P.X, P.Y).X;
end;

procedure TWindowLogForm.dbgLogDblClick(Sender: TObject);
var
  P: TPoint;
  T: TGridCoord;
  ss: string;
begin
  GetCursorPos(P);
  P := dbgLog.ScreenToClient(P);
  T := dbgLog.MouseCoord(P.X, P.Y);
  if (T.X - 1) >= 0 then
  begin
    if dbgLog.Columns[T.X - 1].FieldName = 'LOG_DQSL_QSL_RCVD' then
      if dbgLog.Columns[T.X - 1].Field.AsString = 'Y' then
      begin
        ShowPicture(1);
        exit;
      end;
    if dbgLog.Columns[T.X - 1].FieldName = 'LOG_EQSL_QSL_RCVD' then
      if dbgLog.Columns[T.X - 1].Field.AsString = 'Y' then
      begin
        ShowPicture(0);
        exit;
      end;
  end;

  if dbgLog.ScreenToClient(Mouse.CursorPos).Y > 17 then
  begin
    EditQSO(Self);
  end;

end;

procedure TWindowLogForm.dbgLogDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumnEh;
  State: TGridDrawState);
var
 cc: TCanvas;
 QSLRect,EQSLRect,LQSLRect,DQSLRect:TRect;

function GetQSLColor(FieldNameSent,FieldNameRcvd:string):TColor;
 begin
    if (dbgLog.DataSource.DataSet.FieldByName(FieldNameSent).AsString='Y') and (dbgLog.DataSource.DataSet.FieldByName(FieldNameRcvd).AsString='N') then
      result:=ColorAltSent
    else
    if (dbgLog.DataSource.DataSet.FieldByName(FieldNameSent).AsString='N') and (dbgLog.DataSource.DataSet.FieldByName(FieldNameRcvd).AsString='Y') then
      result:=ColorAltRcvd
    else
    if (dbgLog.DataSource.DataSet.FieldByName(FieldNameSent).AsString='Y') and (dbgLog.DataSource.DataSet.FieldByName(FieldNameRcvd).AsString='Y') then
      result:=ColorAltSentRcvd
    else
      result:=clWindow;
 end;

begin
if not bUseAlternativeColor then exit;
 if Column.FieldName='LOG_QSLINFOCOLOR' then
  begin
    cc := dbgLog.Canvas;
    QSLRect:=Rect;
    EQSLRect:=Rect;
    LQSLRect:=Rect;
    DQSLRect:=Rect;
    QSLRect.Right:=QSLRect.Left+20;

    EQSLRect.Left:=QSLRect.Right;
    EQSLRect.Right:=EQSLRect.Left+20;

    LQSLRect.Left:=EQSLRect.Right;
    LQSLRect.Right:=LQSLRect.Left+20;

    DQSLRect.Left:=LQSLRect.Right;
    DQSLRect.Right:=DQSLRect.Left+20;

    cc.Brush.Color:= GetQSLColor('LOG_QSL_SENT','LOG_QSL_RCVD');
    cc.FillRect(QSLRect);
    cc.Brush.Color:= GetQSLColor('LOG_EQSL_QSL_SENT','LOG_EQSL_QSL_RCVD');
    cc.FillRect(EQSLRect);
    cc.Brush.Color:= GetQSLColor('LOG_LOTW_QSL_SENT','LOG_LOTW_QSL_RCVD');
    cc.FillRect(LQSLRect);
    cc.Brush.Color:= GetQSLColor('LOG_DQSL_QSL_SENT','LOG_DQSL_QSL_RCVD');
    cc.FillRect(DQSLRect);
  end;
end;

procedure TWindowLogForm.dbgLogExit(Sender: TObject);
begin
 if not (dgRowSelect in dbgLog.Options) then
    dbgLog.Options:=dbgLog.Options+[dgRowSelect];
end;

procedure TWindowLogForm.dbgLogGetCellParams(Sender: TObject; Column: TColumnEh; AFont: TFont; var Background: TColor; State: TGridDrawState);
begin
  if bUseAlternativeColor then exit;
  if (csDestroying in TDBGridEh(Sender).ComponentState) or not Assigned(GridColorList) then
    exit;
  if (TDBGridEh(Sender).DataSource.DataSet.FieldValues['LOG_QSL_SENT'] = 'Y') then
    if Assigned(GridColorList.Items[0]) then
    begin
      Background := TGridColor(GridColorList.Items[0]).ColorBackground;
      AFont.Color := TGridColor(GridColorList.Items[0]).ColorForeground;
      AFont.Style := TGridColor(GridColorList.Items[0]).FontStyle;
    end;
  if (TDBGridEh(Sender).DataSource.DataSet.FieldValues['LOG_QSL_SENT'] = 'I') then
    if GridColorList.Count > 2 then
    begin
      Background := TGridColor(GridColorList.Items[2]).ColorBackground;
      AFont.Color := TGridColor(GridColorList.Items[2]).ColorForeground;
      AFont.Style := TGridColor(GridColorList.Items[2]).FontStyle;
    end;

  if (TDBGridEh(Sender).DataSource.DataSet.FieldValues['LOG_QSL_SENT'] = 'Q') then
    if GridColorList.Count > 0 then
    begin
      Background := TGridColor(GridColorList.Items[1]).ColorBackground;
      AFont.Color := TGridColor(GridColorList.Items[1]).ColorForeground;
      AFont.Style := TGridColor(GridColorList.Items[1]).FontStyle;
    end;

  if (Column.FieldName = 'LOG_CALL') and (TDBGridEh(Sender).DataSource.DataSet.FieldValues['LOG_EQSL_QSL_RCVD'] = 'Y') then
    if GridColorList.Count > 5 then
    begin
      Background := TGridColor(GridColorList.Items[5]).ColorBackground;
      AFont.Color := TGridColor(GridColorList.Items[5]).ColorForeground;
      AFont.Style := TGridColor(GridColorList.Items[5]).FontStyle;
    end;

  if TDBGridEh(Sender).DataSource.DataSet.FieldValues['LOG_QSL_RCVD'] = 'Y' then
    if GridColorList.Count > 4 then
    begin
      Background := TGridColor(GridColorList.Items[4]).ColorBackground;
      AFont.Color := TGridColor(GridColorList.Items[4]).ColorForeground;
      AFont.Style := TGridColor(GridColorList.Items[4]).FontStyle;
    end;
end;

procedure TWindowLogForm.dbgLogKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
 if (Key=70) and  (ssCtrl in Shift) then
 begin
    dbgLog.Options:=dbgLog.Options-[dgRowSelect];
    dbgLog.Col:=CurrentCol;
    dbgLog.StartInplaceSearch('', -1, ltdAllEh);
 end;
end;

procedure TWindowLogForm.dbgLogKeyPress(Sender: TObject; var Key: Char);
var
 c:TColumnEh;
begin
 if (Key in symb) then
  begin
    if not dbgLog.STFilter.Visible then
    begin
     dbgLog.STFilter.Visible:=True;
     c := FindColumn(dbgLog, 'LOG_CALL');
     dbgLog.STFilter.Visible:=True;
     TchDBGridEh(dbgLog).StartEditFilter(c.Index);
     SendMessage(dbgLog.Handle, WM_KEYDOWN, VK_ESCAPE, 1);
     TchDBGridEh(dbgLog).FilterEdit.SetFocus;
     TchDBGridEh(dbgLog).ShowFilterEditorChar(Key);
    end;


{    StartEditFilter
    TcrDBGrid(dbgLog).FilterEditMode:=True;}
//    TcrDBGrid(dbgLog).ShowFilterEditorChar(key);

   { if c <> nil then
    if Trim(c.STFilter.ExpressionStr)='' then
      c.STFilter.ExpressionStr := c.STFilter.ExpressionStr+'*'
    else
      c.STFilter.ExpressionStr := Copy(c.STFilter.ExpressionStr,1,Length(c.STFilter.ExpressionStr)-1)+UpperCase(Key)+'*';
    dbgLog.ApplyFilter;   }

    TcrDBGrid(dbgLog).StartEditFilter(3);;
    TcrDBGrid(dbgLog).FilterEdit.SetFocus;
    SendMessage(TcrDBGrid(dbgLog).FilterEdit.Handle, EM_SCROLLCARET, 0, 0); // Sometime need
    TcrDBGrid(dbgLog).ShowFilterEditorChar(Key);
  end;
end;

procedure TWindowLogForm.dbgLogMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
var
  tmp: Integer;
  IdUnderMouse: Integer;
  ss: string;
begin
  { Screen.Cursor:=crDefault;
    if dbgLog.MouseCoord(X,Y).X-1<0 then exit;

    if dbgLog.Columns[dbgLog.MouseCoord(X,Y).X-1].FieldName='LOG_DQSL_QSL_RCVD' then
    begin
    TDBGridEh(Sender).DataSource.DataSet.DisableControls;
    tmp:=TDBGridEh(Sender).MouseCoord(x, Y).Y-TDBGridEh(Sender).row;
    TDBGridEh(Sender).DataSource.DataSet.MoveBy(tmp) ;
    ss:= TDBGridEh(Sender).Columns[TDBGridEh(Sender).MouseCoord(x, Y).X-1].Field.AsString;
    TDBGridEh(Sender).DataSource.DataSet.MoveBy(-tmp) ;
    TDBGridEh(Sender).DataSource.DataSet.EnableControls;
    if ss='Y' then
    Screen.Cursor:=crHandPoint
    else
    Screen.Cursor:=crDefault;
    end; }
end;

procedure TWindowLogForm.dbgLogSelectionChanged(Sender: TObject);
begin
 if not (dgRowSelect in dbgLog.Options) then
    dbgLog.Options:=dbgLog.Options+[dgRowSelect];
end;

procedure TWindowLogForm.dbgLogTranslateFilterDialog(Sender: TCustomDBGridEh;
  Dialog: TForm);
begin
  ShowMessage(TDBGridEhSimpleFilterDialog(Dialog).Caption);
end;

procedure TWindowLogForm.DeleteQSO;
var
  lParam, wParam: variant;
begin
  if MessageBox(Handle, PWideChar(msgDeleteRecord.Caption), '', mb_YesNo or mb_iconquestion) = mrYes then
  begin
    if dbgLog.Selection.SelectionType = gstAll then
    begin
      dbgLog.SelectedRows.SelectAll;
      lParam := 0;
      wParam := 1;
      lDllCommand(DC_DELETE_QSO, Self, lParam, wParam);
    end
    else
    begin
      GetSelectedRecords(lParam, wParam);
      wParam := 0;
      lDllCommand(DC_DELETE_QSO, Self, lParam, wParam);
    end;
    dbgLog.SelectedRows.Clear;
  end;
end;

procedure TWindowLogForm.dsLogDataChange(Sender: TObject; Field: TField);
begin
  if not Assigned(FViewPicture) then
    exit;

  if FViewPicture.Showing then
  begin
    // if dbgLog.DataSource.DataSet.FieldByName('LOG_DQSL_QSL_RCVD').asString='Y' then
    ShowPicture(-1);
  end;

end;

procedure TWindowLogForm.RefreshLog(lParam, wParam: Integer);
var
 i:integer;
begin
{  if wParam=-1 then
   begin
     for i:=0 to dbgLog.Columns.Count - 1 do
       begin
         dbgLog.Columns[i].Title.SortMarker:=smNoneEh;
       end;
     TKaDaoTable(dbgLog.DataSource.DataSet).SortedBy.Text:='LOG_QSO_DATETIME';
     TKaDaoTable(dbgLog.DataSource.DataSet).Sort;
   end;                      }
  dbgLog.DefaultApplySorting;
end;

procedure TWindowLogForm.ChangeStation(StationId: Integer);
begin
  iStationId := StationId;
  LogTableName := 'LOG_' + IntToStr(StationId);

  if dbgLog.DataSource.DataSet.Active and (TKADaoTable(dbgLog.DataSource.DataSet).TableName <> LogTableName) then
  begin
    dbgLog.DataSource.DataSet.Close;
    TKADaoTable(dbgLog.DataSource.DataSet).TableName := LogTableName;
    dbgLog.DataSource.DataSet.Open;
  end;


  // TKADaoTable(dbgLog.DataSource.DataSet).TableName := LogTableName;

  // if not lbLoaded then exit;
  {
    if StationId = 0 then
    begin
    dbgLog.DataSource.DataSet.Close;
    exit;
    end;
    LogTableName := 'LOG_' + IntToStr(StationId);

    if dbgLog.DataSource.DataSet.Active and (TKADaoTable(dbgLog.DataSource.DataSet).TableName <> LogTableName) then
    begin
    dbgLog.DataSource.DataSet.Close;
    TKADaoTable(dbgLog.DataSource.DataSet).TableName := LogTableName;
    dbgLog.DataSource.DataSet.Open;
    end;

    if lbLoaded and not dbgLog.DataSource.DataSet.Active and (iStationId <> 0) then
    begin
    cbFilters.ItemIndex := 0;
    dbgLog.DataSource.DataSet.Close;
    TKADaoTable(dbgLog.DataSource.DataSet).TableName := LogTableName;
    dbgLog.DataSource.DataSet.Open;
    end;

    dbgLog.DefaultApplySorting; }
end;

procedure TWindowLogForm.EditQSO(Sender: TObject);
var
  lParam, wParam: variant;
begin
  dbgLog.Enabled := False;
  lParam := dbgLog.DataSource.DataSet.FieldByName('LOG_ID').AsInteger;
  lDllCommand(DC_EDIT_QSO, Self, lParam, wParam);
end;

procedure TWindowLogForm.aFilterExecute(Sender: TObject);
begin
  // dbgLog.STFilter.Visible := tbFilter.Down;
  if dbgLog.STFilter.Visible then
    dbgLog.ClearFilter;
  dbgLog.STFilter.Visible := not dbgLog.STFilter.Visible;
  tbFilter.Down := dbgLog.STFilter.Visible;
  { cbFilters.ItemIndex := 0;
    dbgLog.ClearFilter; }
  if not dbgLog.STFilter.Visible then
  begin
    dbgLog.ApplyFilter;
  end;
end;

function TWindowLogForm.FindColumn(Grid: TDBGridEh; const FieldName: string): TColumnEh;
var
  I: Integer;
begin
  Result := nil;
  for I := 0 to Grid.Columns.Count - 1 do
    if AnsiCompareText(Grid.Columns[I].FieldName, FieldName) = 0 then
      exit(Grid.Columns[I]);
end;

function TWindowLogForm.GetGridFilter(Grid: TDBGridEh): string;
var
  I: Integer;
begin
  Result := '';
  for I := 0 to Grid.Columns.Count - 1 do
    if Grid.Columns[I].STFilter.ExpressionStr <> '' then
      Result := Result + #13#10 + Grid.Columns[I].FieldName + '=' + Grid.Columns[I].STFilter.ExpressionStr;
  Result := trim(Result);
end;

procedure TWindowLogForm.SetGridFilter(Grid: TDBGridEh; const Filter: string; IsApply: boolean);
var
  c: TColumnEh;
  I: Integer;
begin
  with TStringList.Create do
    try
      Text := Filter;
      for I := 0 to Count - 1 do
      begin
        c := FindColumn(Grid, Names[I]);
        if c <> nil then
          c.STFilter.ExpressionStr := Values[Names[I]];
      end;
      if IsApply then
        Grid.ApplyFilter;
    finally
      free;
    end;
end;

procedure TWindowLogForm.aFilterSaveExecute(Sender: TObject);
var
  slFilter: TStringList;
begin
  EditFilterName := TEditFilterName.Create(Application);
  try
    EditFilterName.Caption := WindowLog_EditFilterName.Caption;
    EditFilterName.leFilterName.EditLabel.Caption := EditFilterName.Caption;
    EditFilterName.btnOk.Caption := WindowLog_EditFilterbtnOk.Caption;
    EditFilterName.btnCancel.Caption := WindowLog_EditFilterbtnCancel.Caption;
    if EditFilterName.ShowModal = mrOk then
    begin
      slFilter := TStringList.Create;
      try
        slFilter.Text := GetGridFilter(dbgLog);
        slFilter.SaveToFile(ExtractFilePath(Application.ExeName) + '\Data\Filters\' + EditFilterName.leFilterName.Text);
        InitData;
        cbFilters.ItemIndex := cbFilters.Items.IndexOf(EditFilterName.leFilterName.Text);
      finally
        slFilter.free;
      end;
    end;
  finally
    EditFilterName.free;
  end;

end;

procedure TWindowLogForm.aFilterSaveUpdate(Sender: TObject);
begin
  aFilterSave.Enabled := tbFilter.Down;
end;

procedure TWindowLogForm.CancelQSO;
begin
  dbgLog.Enabled := True;
end;

procedure TWindowLogForm.cbFiltersClick(Sender: TObject);
var
  sStr: string;
  slFilter: TStringList;
begin
  if iStationId = 0 then
    exit;

  Screen.Cursor := crHourGlass;
  try
    dbgLog.STFilter.Visible := False;
    if cbFilters.ItemIndex > 0 then
    begin
      slFilter := TStringList.Create;
      dbgLog.ClearFilter;
      slFilter.LoadFromFile(ExtractFilePath(Application.ExeName) + '\Data\Filters\' + cbFilters.Text);

      try
        slFilter.LoadFromFile(ExtractFilePath(Application.ExeName) + '\Data\Filters\' + cbFilters.Text);
        if UpperCase(Copy(slFilter.Text, 1, 6)) = 'SELECT' then
        begin
          dbgLog.DataSource.DataSet.Close;
          sStr := StringReplace(slFilter.Text, '[LOG_TABLE]', LogTableName, [rfReplaceAll, rfIgnoreCase]);
          TKADaoTable(dbgLog.DataSource.DataSet).SQL.Text := StringReplace(slFilter.Text, '[LOG_TABLE]', LogTableName, [rfReplaceAll, rfIgnoreCase]);
          TKADaoTable(dbgLog.DataSource.DataSet).SQL.SaveToFile('D:\!\!query.sql');
          dbgLog.DataSource.DataSet.Open;
          TKADaoTable(dbgLog.DataSource.DataSet).Filter := '';
          TKADaoTable(dbgLog.DataSource.DataSet).Filtered := False;
        end
        else
        begin
          dbgLog.STFilter.Visible := True;
          SetGridFilter(dbgLog, slFilter.Text, True);
          if not dbgLog.DataSource.DataSet.Active then
          begin
            TKADaoTable(dbgLog.DataSource.DataSet).TableName := LogTableName;
            dbgLog.DataSource.DataSet.Open;
          end;
        end;

      finally
        slFilter.free;
      end;
    end
    else
    begin
      dbgLog.ClearFilter;
      dbgLog.DataSource.DataSet.Close;
      TKADaoTable(dbgLog.DataSource.DataSet).TableName := LogTableName;
      TKADaoTable(dbgLog.DataSource.DataSet).Filter := '';
      TKADaoTable(dbgLog.DataSource.DataSet).Filtered := False;
      dbgLog.DataSource.DataSet.Open;
    end;
  finally
    dbgLog.DefaultApplySorting;
    tbFilter.Down := dbgLog.STFilter.Visible;
    Screen.Cursor := crDefault;
  end;
end;

procedure TWindowLogForm.SaveQSO;
begin
  dbgLog.Enabled := True;
end;

procedure TWindowLogForm.SaveGrid;
var
  S: string;
  I: Integer;
begin
  with dbgLog.Columns do
  begin
    for I := 0 to Count - 1 do
    begin
      S := Format('%d,%d,%d,%d,%d,%d,%d,%d,%d', [Items[I].Index, Items[I].Width, Integer(Items[I].Title.SortMarker), Integer(Items[I].Visible), Items[I].Title.SortIndex, Items[I].DropDownRows, Items[I].DropDownWidth, Items[I].InRowLinePos, Items[I].InRowLineHeight]);
      if S <> '' then
      begin
        if ((S[1] = '"') and (S[Length(S)] = '"')) or ((S[1] = '''') and (S[Length(S)] = '''')) then
          S := '"' + S + '"';
      end;
      FormStorage.WriteString('dbgLog.' + Items[I].FieldName, S);
    end;
  end;
end;

procedure TWindowLogForm.GetSelectedRecords(var lParam: variant; var wParam: variant);
var
  SelRecords: variant;
  I: Integer;
  Bookmark: TBytes;
begin
  wParam := 0;
  if dbgLog.Selection.SelectionType = gstAll then
  begin
    dbgLog.SelectedRows.SelectAll;
    wParam := 1;
    { SelRecords := VarArrayCreate([0, dbgLog.DataSource.DataSet.RecordCount - 1], varVariant);
      Bookmark := dbgLog.DataSource.DataSet.GetBookmark;
      dbgLog.DataSource.DataSet.DisableControls;
      dbgLog.DataSource.DataSet.First;
      try
      I:=0;
      while not dbgLog.DataSource.DataSet.Eof do
      begin
      SelRecords[I] := dbgLog.DataSource.DataSet.FieldByName('LOG_ID').asInteger;
      Inc(I);
      dbgLog.DataSource.DataSet.Next;
      end;
      lParam := SelRecords;
      finally
      dbgLog.DataSource.DataSet.GotoBookmark(Bookmark);
      dbgLog.DataSource.DataSet.EnableControls;
      SelRecords := Unassigned;
      end; }
  end
  else
  begin
    SelRecords := VarArrayCreate([0, dbgLog.SelectedRows.Count - 1], varVariant);
    // Bookmark := dbgLog.DataSource.DataSet.GetBookmark;
    dbgLog.DataSource.DataSet.DisableControls;
    dbgLog.SaveBookmark;
    try
      for I := 0 to dbgLog.SelectedRows.Count - 1 do
      begin
        // dbgLog.DataSource.DataSet.GotoBookmark(Pointer(dbgLog.SelectedRows.Items[I]));
        dbgLog.DataSource.DataSet.Bookmark := dbgLog.SelectedRows[I];
        SelRecords[I] := dbgLog.DataSource.DataSet.FieldByName('LOG_ID').AsInteger;
      end;
      lParam := SelRecords;
    finally
      // dbgLog.DataSource.DataSet.GotoBookmark(Bookmark);
      dbgLog.RestoreBookmark;
      // dbgLog.SelectedRows.Clear;
      dbgLog.DataSource.DataSet.EnableControls;
      SelRecords := Unassigned;
    end;
  end;
end;

procedure TWindowLogForm.UpdateSQLSent(sSent: string);
var
  I: Integer;
begin

  dbgLog.DataSource.DataSet.DisableControls;
  dbgLog.SaveBookmark;
  Screen.Cursor := crHourGlass;
  try
    if dbgLog.Selection.SelectionType = gstAll then
      dbgLog.SelectedRows.SelectAll;

    if dbgLog.SelectedRows.Count = 0 then
      dbgLog.SelectedRows.CurrentRowSelected := True;

    if dbgLog.SelectedRows.Count > 0 then
    begin
      for I := 0 to dbgLog.SelectedRows.Count - 1 do
      begin
        dbgLog.DataSource.DataSet.Bookmark := dbgLog.SelectedRows[I];
        try
          dbgLog.DataSource.DataSet.Edit;
          dbgLog.DataSource.DataSet.FieldByName('LOG_QSL_SENT').AsString := sSent;
          if sSent = 'Y' then
            dbgLog.DataSource.DataSet.FieldByName('LOG_QSL_SENT_VIA').AsString := 'B';
          dbgLog.DataSource.DataSet.FieldByName('LOG_QSLSDATE').AsDateTime := Date;
          dbgLog.DataSource.DataSet.Post;
        except
          on E: Exception do
            MessageBox(Application.Handle, PWideChar(E.Message), 'Error', MB_OK or MB_ICONERROR);
        end;
      end;
      dbgLog.Selection.Clear;
    end;
  finally
    dbgLog.RestoreBookmark;
    dbgLog.DataSource.DataSet.EnableControls;
    Screen.Cursor := crDefault;
  end;
end;

procedure TWindowLogForm.SentQSL;
begin
  UpdateSQLSent('Y');
end;

procedure TWindowLogForm.RcvdQSL(Sender: TObject);
var
  I: Integer;
begin
  dbgLog.DataSource.DataSet.DisableControls;
  dbgLog.SaveBookmark;
  Screen.Cursor := crHourGlass;
  try
    if dbgLog.Selection.SelectionType = gstAll then
      dbgLog.SelectedRows.SelectAll;

    if dbgLog.SelectedRows.Count = 0 then
      dbgLog.SelectedRows.CurrentRowSelected := True;

    if dbgLog.SelectedRows.Count > 0 then
    begin
      for I := 0 to dbgLog.SelectedRows.Count - 1 do
      begin
        dbgLog.DataSource.DataSet.Bookmark := dbgLog.SelectedRows[I];
        try
          dbgLog.DataSource.DataSet.Edit;
          dbgLog.DataSource.DataSet.FieldByName('LOG_QSL_RCVD').AsString := 'Y';
          dbgLog.DataSource.DataSet.FieldByName('LOG_QSLRDATE').AsDateTime := Date;
          dbgLog.DataSource.DataSet.Post;
        except
          on E: Exception do
            MessageBox(Application.Handle, PWideChar(E.Message), 'Error', MB_OK or MB_ICONERROR);
        end;
      end;
      dbgLog.Selection.Clear;
    end;
  finally
    dbgLog.RestoreBookmark;
    dbgLog.DataSource.DataSet.EnableControls;
    Screen.Cursor := crDefault;
  end;
end;

procedure TWindowLogForm.IgnoreQSL;
begin
  UpdateSQLSent('I');
end;

procedure TWindowLogForm.ShowNeqEQSL;
begin
  if Parent.Visible then
  begin
    dbgLog.FieldColumns['LOG_EQSL_QSLRDATE'].STFilter.ExpressionStr := '>28.09.2010';
    dbgLog.ApplyFilter;
    tbFilter.Down := True;
  end;
end;

procedure TWindowLogForm.PrintQueueAddQSO(Sender: TObject);
begin
  UpdateSQLSent('Q');
end;

procedure TWindowLogForm.InitGridColors;
var
  slColors: TStringList;
  slColorLine: TStringList;
  GridColor: TGridColor;
  I: Integer;
begin
  bUseAlternativeColor:=lAppStorage.ReadBoolean('Options\cbGeneralColorAlternative_Checked');
  if bUseAlternativeColor then
   begin
     ColorAltSent:=StringToColor(lAppStorage.ReadString('Options\cbColorAltSent_ColorValue','clWindow'));
     ColorAltRcvd:=StringToColor(lAppStorage.ReadString('Options\cbColorAltRcvd_ColorValue','clWindow'));
     ColorAltSentRcvd:=StringToColor(lAppStorage.ReadString('Options\cbColorAltSentRcvd_ColorValue','clWindow'));
     exit;
   end;
  GridColorList.Clear;
  slColors := TStringList.Create;
  slColorLine := TStringList.Create;
  slColorLine.Delimiter := '|';
  try
    lAppStorage.ReadStringList('Options\GridColors', slColors);
    for I := 0 to slColors.Count - 1 do
    begin
      slColorLine.DelimitedText := slColors.Strings[I];
      GridColor := TGridColor.Create;
      GridColor.ColorBackground := StrToInt2(slColorLine.Strings[0]);
      GridColor.ColorForeground := StrToInt2(slColorLine.Strings[1]);
      if boolean(StrToInt2(slColorLine.Strings[2])) then
        GridColor.FontStyle := GridColor.FontStyle + [fsBold];
      if boolean(StrToInt2(slColorLine.Strings[3])) then
        GridColor.FontStyle := GridColor.FontStyle + [fsItalic];
      if boolean(StrToInt2(slColorLine.Strings[4])) then
        GridColor.FontStyle := GridColor.FontStyle + [fsUnderline];
      GridColorList.Add(GridColor);
    end;
    dbgLog.Repaint;
  finally
    slColors.free;
    slColorLine.free;
  end;
end;

procedure TWindowLogForm.InitData;
var
  slFiles: TStringList;
  I: Integer;
  sFileName: string;
begin
  cbFilters.Items.Clear;
  cbFilters.Items.Add('-');
  slFiles := TStringList.Create;
  try
    FindFilesByMask(slFiles, ExtractFilePath(Application.ExeName) + 'Data\Filters', '*.*');
    for I := 0 to slFiles.Count - 1 do
    begin
      sFileName := ExtractFileName(slFiles.Strings[I]);
      cbFilters.Items.Add(sFileName);
    end;
  finally
    slFiles.free;
  end;
  cbFilters.Sorted := True;
end;

procedure TWindowLogForm.SetImagesPath;
begin
  FEQSLImagePath := lAppStorage.ReadString('Options\deEQSLPictureDirectory_Text', '');

  if trim(FEQSLImagePath) <> '' then
  begin
    if POS(':', FEQSLImagePath) = 0 then
      FEQSLImagePath := ExtractFilePath(Application.ExeName) + FEQSLImagePath;
  end
  else
    FEQSLImagePath := ExtractFilePath(Application.ExeName) + FEQSLImagePath;
  if FEQSLImagePath[Length(FEQSLImagePath)] <> '\' then
    FEQSLImagePath := FEQSLImagePath + '\';

  FDQSLImagePath := lAppStorage.ReadString('Options\deDQSLPictureDirectory_Text', '');

  if trim(FDQSLImagePath) <> '' then
  begin
    if POS(':', FDQSLImagePath) = 0 then
      FDQSLImagePath := ExtractFilePath(Application.ExeName) + FDQSLImagePath;
  end
  else
    FDQSLImagePath := ExtractFilePath(Application.ExeName) + FDQSLImagePath;
  if FDQSLImagePath[Length(FDQSLImagePath)] <> '\' then
    FDQSLImagePath := FDQSLImagePath + '\';

end;

procedure TWindowLogForm.ShowPicture(iType: Integer); // 0-eQSL 1-dQSL
var
  sFileName: string;
  sPath: string;
begin
  qryQSLImageFiles.Close;
  qryQSLImageFiles.Params.ParamByName('STATION_ID').AsInteger := iStationId;
  qryQSLImageFiles.Params.ParamByName('LOG_ID').AsInteger := dbgLog.DataSource.DataSet.FieldByName('LOG_ID').AsInteger;
  qryQSLImageFiles.Open;
  if not qryQSLImageFiles.IsEmpty then
  begin
    if iType = -1 then
    begin
      if Assigned(FViewPicture) then
        iType := FViewPicture.TypeQSL
      else
        exit;
    end;
    if iType = 0 then
    begin
      sFileName := qryQSLImageFiles.FieldByName('IMAGE_EQSL_FILENAME').AsString;
      sPath := FEQSLImagePath;
    end;
    if iType = 1 then
    begin
      sFileName := qryQSLImageFiles.FieldByName('IMAGE_DQSL_FILENAME').AsString;
      sPath := FDQSLImagePath;
    end;

    { if FileExists(sPath + sFileName) then
      begin }
    if FViewPicture = nil then
    begin
      FViewPicture := TViewPicture.Create(Self);
      FViewPicture.FormStorage.AppStorage := lAppStorage;
      FViewPicture.LoadImage(iType, sPath, sFileName);
      FViewPicture.Show;
      FViewPicture.FreeNotification(Self);
    end
    else
      FViewPicture.LoadImage(iType, sPath, sFileName)
  end
  else if Assigned(FViewPicture) then
  begin
    FViewPicture.Caption := '';
    FViewPicture.imgPicture.Picture := nil;
  end;
end;

procedure TWindowLogForm.Loaded;
var
  I: Integer;
begin
  cbFilters.OnClick(WindowLogForm);
  if not dbgLog.DataSource.DataSet.Active then
    exit;

  for I := 0 to dbgLog.Columns.Count - 1 do
  begin
    if dbgLog.Columns[I].Title.SortMarker = smDownEh then
    begin
      dbgLog.DataSource.DataSet.Last;
      exit;
    end;
    if dbgLog.Columns[I].Title.SortMarker = smUpEh then
    begin
      dbgLog.DataSource.DataSet.First;
      exit;
    end;
  end;
end;

procedure TWindowLogForm.GotoRecord(lParam: variant);
begin
  if dbgLog.DataSource.DataSet.Locate('LOG_ID', lParam, []) then
  begin
    dbgLog.SelectedRows.Clear;
    dbgLog.SelectedRows.CurrentRowSelected := True;
  end;
end;

end.
